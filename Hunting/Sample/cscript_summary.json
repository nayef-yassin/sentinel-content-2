{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "workspace": {
      "type": "String"
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('workspace'), '/cscript_summary')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "eTag": "*",
        "displayName": "Cscript script daily summary breakdown",
        "category": "Hunting Queries",
        "query": "\nlet ProcessCreationEvents=() {\nlet processEvents=SecurityEvent\n| where EventID==4688\n| project EventTime=TimeGenerated, ComputerName=Computer,AccountName=SubjectUserName, AccountDomain=SubjectDomainName,\nFileName=tostring(split(NewProcessName, '\\\\')[-1]),  ProcessCommandLine = CommandLine, \nInitiatingProcessFileName=ParentProcessName,InitiatingProcessCommandLine=\"\",InitiatingProcessParentFileName=\"\";\nprocessEvents;\n};\n// Daily summary of cscript activity - extracting script name and parameters from commandline:\nProcessCreationEvents \n| where FileName =~ \"cscript.exe\"\n// remove commandline switches\n| project EventTime, ComputerName, AccountName, removeSwitches = replace(@\"/+[a-zA-Z0-9:]+\", \"\", ProcessCommandLine)\n// remove the leading cscript.exe process name \n| project EventTime, ComputerName, AccountName, CommandLine = trim(@\"[a-zA-Z0-9\\\\:\"\"]*cscript(.exe)?(\"\")?(\\s)+\", removeSwitches)\n// extract the script name:\n| project EventTime, ComputerName, AccountName, \n// handle case where script name is enclosed in \" characters or is not enclosed in quotes \nScriptName= iff(CommandLine startswith @\"\"\"\", \nextract(@\"([:\\\\a-zA-Z_\\-\\s0-9\\.()]+)(\"\"?)\", 0, CommandLine), \nextract(@\"([:\\\\a-zA-Z_\\-0-9\\.()]+)(\"\"?)\", 0, CommandLine)), CommandLine \n| project EventTime, ComputerName, AccountName, ScriptName=trim(@\"\"\"\", ScriptName) , ScriptNameLength=strlen(ScriptName), CommandLine \n// extract remainder of commandline as script parameters: \n| project EventTime, ComputerName, AccountName, ScriptName, ScriptParams = iff(ScriptNameLength < strlen(CommandLine), substring(CommandLine, ScriptNameLength +1), \"\")\n| summarize min(EventTime), count() by ComputerName, AccountName, ScriptName, ScriptParams\n| order by count_ asc nulls last \n| extend timestamp = min_EventTime, HostCustomEntity = ComputerName, AccountCustomEntity = AccountName\n",
        "version": 1,
        "tags": [
          {
            "name": "description",
            "value": "breakdown of scripts running in the environment"
          },
          {
            "name": "tactics",
            "value": "Execution"
          }
        ]
      }
    }
  ]
}
