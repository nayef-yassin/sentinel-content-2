{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "workspace": {
      "type": "String"
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('workspace'), '/AzureResourceCreationWithNetworkActivity')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "eTag": "*",
        "displayName": "Anomalous Resource Creation and related Network Activity",
        "category": "Hunting Queries",
        "query": "\nlet starttime = todatetime('{{StartTimeISO}}');\nlet endtime = todatetime('{{EndTimeISO}}');\nlet lookback = totimespan((endtime-starttime)*7);\nlet activity = AzureActivity\n| where TimeGenerated >= startofday(ago(lookback))\n// We look for any Operation that created and then succeeded where ActivitySubstatusValue has a value so that we can provide context\n| where OperationNameValue endswith \"write\"\n| where ActivityStatusValue has \"Succeeded\"\n| make-series dResourceCount=dcount(ResourceId) default=0 on EventSubmissionTimestamp in range(startofday(ago(7d)), now(), 1d) by Caller, Resource, OperationNameValue\n| extend (RSquare,Slope,Variance,RVariance,Interception,LineFit)=series_fit_line(dResourceCount)\n// Comment slope reference below to see all returns\n| where Slope > 0.2\n| join kind=leftsemi (\n// Last day's activity is anomalous\nAzureActivity\n| where TimeGenerated between(starttime..endtime)\n// We look for any Operation that created and then succeeded where ActivitySubstatusValue has a value so that we can provide context\n| where OperationNameValue endswith \"write\"\n| where ActivityStatusValue has \"Succeeded\"\n| make-series dResourceCount=dcount(ResourceId) default=0 on EventSubmissionTimestamp in range(startofday(ago(1d)), now(), 1d) by Caller, Resource, OperationNameValue\n| extend (RSquare,Slope,Variance,RVariance,Interception,LineFit)=series_fit_line(dResourceCount)\n// Comment slope reference below to see all returns\n| where Slope > 0.2\n) on Caller, Resource, OperationNameValue\n// Expanding the fields that were grouped so we can match on a time window when we join the details later\n| mvexpand EventSubmissionTimestamp, dResourceCount\n// Making sure the fields are the right type or the join fails\n| extend todatetime(EventSubmissionTimestamp), tostring(dResourceCount)\n| join kind= inner (\n  AzureActivity\n  | where TimeGenerated between(starttime..endtime)\n  // We look for any Operation that created and then succeeded where ActivitySubstatusValue has a value so that we can provide context\n  | where OperationNameValue endswith \"write\"\n  | where ActivityStatusValue has \"Succeeded\" and isnotempty(ActivitySubstatusValue)\n  | summarize by EventSubmissionTimestamp = bin(EventSubmissionTimestamp, 1d), Caller, CallerIpAddress, OperationNameValue, ActivityStatusValue, Resource, ResourceGroup, ResourceId, SubscriptionId\n) on EventSubmissionTimestamp, Caller, Resource, OperationNameValue;\nlet NetworkAnalytics =\n  union isfuzzy=true\n  (AzureNetworkAnalytics_CL\n  | where TimeGenerated between(starttime..endtime)\n  // Controlling for Schema Version and later parsing - This is Version 2 and Public IPs only\n  | where (isnotempty(FASchemaVersion_s) and isnotempty(DestPublicIPs_s))\n  | extend SchemaVersion = FASchemaVersion_s\n  | extend PublicIPs = tostring(split(DestPublicIPs_s,\"|\")[0])\n  | summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), FirstProcessedTimeUTC = min(FlowStartTime_t), LastProcessedTimeUtc = max(FlowEndTime_t),\n  Regions = makeset(Region_s), AzureRegions = makeset(AzureRegion_s), VMs = makeset(VM_s), MACAddresses = makeset(MACAddress_s), PublicIPs = makeset(PublicIPs), DestPort = makeset(DestPort_d), SrcIP = makeset(SrcIP_s),\n  ActivityCount = count() by NSGRule_s, NSGList_s, SubNet = Subnet1_s, FlowDirection_s, Subscription = Subscription1_g, Tags_s, SchemaVersion\n  //NSGList_s contains the subscription ID, remove that as we already have a field for this and now it will match what we get for SchemaVersion 1\n  | extend NSG = case(isnotempty(NSGList_s), strcat(split(NSGList_s, \"/\")[-2],\"/\",split(NSGList_s, \"/\")[-1]), \"NotAvailable\")\n  // Depending on the SchemaVersion, we will need to provide the NSG_Name for matching against the resource identified in AzureActivity\n  | extend NSG_Name = tostring(split(NSG, \"/\")[-1])\n  ),\n  (\n  AzureNetworkAnalytics_CL\n  | where TimeGenerated between(starttime..endtime)\n  // Controlling for Schema Version and later parsing - This is Version 1\n  | where isempty(FASchemaVersion_s)\n  // Controlling for public IPs only\n  | where isnotempty(PublicFrontendIPs_s) or isnotempty(PublicIPAddresses_s)\n  | where PublicFrontendIPs_s != \"null\" or PublicIPAddresses_s != \"null\"\n  | extend SchemaVersion = SchemaVersion_s\n  // The Public IP can be indicated in one of 2 locations, assigning here for easy union results\n  | extend PublicIPs = case(isnotempty(PublicFrontendIPs_s), PublicFrontendIPs_s,\n  PublicIPAddresses_s)\n  | summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), FirstProcessedTimeUTC = min(TimeProcessed_t), LastProcessedTimeUtc = max(TimeProcessed_t),\n  Regions = makeset(Region_s), AzureRegions = makeset(DiscoveryRegion_s), VMs = makeset(VirtualMachine_s), MACAddresses = makeset(MACAddress_s), PublicIPs = makeset(PublicIPs),\n  SrcIP = makeset(PrivateIPAddresses_s), Name = makeset(Name_s), DestPort = makeset(DestinationPortRange_s),\n  ActivityCount = count() by NSG = NSG_s, SubNet = Subnetwork_s, Subscription = Subscription_g, Tags_s, SchemaVersion\n  // Some events don't have an NSG listed, populating so it is clear it is not available in th datatype\n  | extend NSG = case(isnotempty(NSG), NSG, \"NotAvailable\")\n  // Depending on the SchemaVersion, we will need to provide the NSG_Name for matching against the resource identified in AzureActivity\n  | extend NSG_Name = tostring(split(NSG, \"/\")[-1])\n  )\n  | project StartTimeUtc, EndTimeUtc, FirstProcessedTimeUTC, LastProcessedTimeUtc, PublicIPs, NSG, NSG_Name, SrcIP, DestPort, SubNet, Name, VMs, MACAddresses, ActivityCount, Regions, AzureRegions, Subscription, Tags_s, SchemaVersion\n  ;\n  activity | join kind= leftouter (NetworkAnalytics\n  ) on $left.Resource == $right.NSG_Name\n  | extend timestamp = StartTimeUtc, AccountCustomEntity = Caller, IPCustomEntity = CallerIpAddress\n",
        "version": 1,
        "tags": [
          {
            "name": "description",
            "value": "Indicates when an anomalous number of resources are created successfully in Azure via the AzureActivity log.\nThis is then joined with the AzureNetworkAnalytics_CL data to identify any network related activity for the created resource.\nThe a"
          },
          {
            "name": "tactics",
            "value": "Impact"
          },
          {
            "name": "relevantTechniques",
            "value": "T1496"
          }
        ]
      }
    }
  ]
}
