{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "workspace": {
      "type": "String"
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('workspace'), '/TrackingPasswordChanges')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "eTag": "*",
        "displayName": "Tracking Password Changes",
        "category": "Hunting Queries",
        "query": "\nlet action = dynamic([\"change \", \"changed \", \"reset \"]);\nlet pWord = dynamic([\"password \", \"credentials \"]);\n(union isfuzzy=true\n  (SecurityEvent\n| where EventID in (4723,4724)\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), ResultDescriptions = makeset(Activity), ActionCount = count() by Resource = Computer, OperationName = strcat(\"TargetAccount: \", TargetUserName), UserId = Account, Type\n),\n(AuditLogs\n| where OperationName has_any (pWord) and OperationName has_any (action)\n| extend InitiatedBy = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName) \n| extend TargetUserPrincipalName = tostring(TargetResources[0].userPrincipalName) \n| where ResultDescription != \"None\" \n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), ResultDescriptions = makeset(ResultDescription), CorrelationIds = makeset(CorrelationId), ActionCount = count() by OperationName = strcat(Category, \" - \", OperationName, \" - \", Result), Resource, UserId = TargetUserPrincipalName, Type\n| extend ResultDescriptions = tostring(ResultDescriptions)\n),\n(OfficeActivity\n| where (ExtendedProperties has_any (pWord) or ModifiedProperties has_any (pWord)) and (ExtendedProperties has_any (action) or ModifiedProperties has_any (action))\n| extend ResultDescriptions = case(\nOfficeWorkload =~ \"AzureActiveDirectory\", tostring(ExtendedProperties),\nOfficeWorkload has_any (\"Exchange\",\"OneDrive\"), OfficeObjectId,\nRecordType) \n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), ResultDescriptions = makeset(ResultDescriptions), ActionCount = count() by Resource = OfficeWorkload, OperationName = strcat(Operation, \" - \", ResultStatus), IPAddress = ClientIP, UserId, Type\n),\n(Syslog\n| where SyslogMessage has_any (pWord) and SyslogMessage has_any (action)\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), ResultDescriptions = makeset(SyslogMessage), ActionCount = count() by Resource = HostName, OperationName = Facility , IPAddress = HostIP, ProcessName, Type\n),\n(SigninLogs\n| where OperationName =~ \"Sign-in activity\" and ResultType has_any (\"50125\", \"50133\")\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), ResultDescriptions = makeset(ResultDescription), CorrelationIds = makeset(CorrelationId), ActionCount = count() by Resource, OperationName = strcat(OperationName, \" - \", ResultType), IPAddress, UserId = UserPrincipalName, Type\n)\n)\n| extend timestamp = StartTimeUtc, AccountCustomEntity = UserId, IPCustomEntity = IPAddress\n",
        "version": 1,
        "tags": [
          {
            "name": "description",
            "value": "Identifies when a password change or reset occurs across multiple host and cloud based sources. \nAccount manipulation including password changes and resets may aid adversaries in maintaining access to credentials \nand certain permission lev"
          },
          {
            "name": "tactics",
            "value": "InitialAccess,CredentialAccess"
          },
          {
            "name": "relevantTechniques",
            "value": "T1078,T1110"
          }
        ]
      }
    }
  ]
}
