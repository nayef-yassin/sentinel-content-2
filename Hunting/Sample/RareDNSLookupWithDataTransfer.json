{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "workspace": {
      "type": "String"
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('workspace'), '/RareDNSLookupWithDataTransfer')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "eTag": "*",
        "displayName": "RareDNSLookupWithDataTransfer",
        "category": "Hunting Queries",
        "query": "\nlet starttime = todatetime('{{StartTimeISO}}');\nlet endtime = todatetime('{{EndTimeISO}}');\nlet lookback = totimespan((endtime-starttime)*7);\nlet lookupThreshold = 21;\nlet lookbackint = 7;\nlet binvalue = 1;\nlet bintime = make_timespan(binvalue,0);\nlet avgCalc = starttime/1h;\nlet PrivateIPregex = @'^127\\.|^10\\.|^172\\.1[6-9]\\.|^172\\.2[0-9]\\.|^172\\.3[0-1]\\.|^192\\.168\\.';\n// Identify all domain lookups before start time and after lookback time\nlet DomainLookups = DnsEvents\n| where TimeGenerated between(ago(lookback)..starttime)\n| where SubType == \"LookupQuery\"\n| where isnotempty(IPAddresses)\n| extend Domain = iff(countof(Name,'.') >= 2, strcat(split(Name,'.')[-2], '.',split(Name,'.')[-1]), Name)\n| summarize DomainCount = count() by Domain\n| project Domain, DailyAvgLookupCountOverLookback = DomainCount/lookbackint;\n// Common lookups should not include items that occurred more rarely over the lookback period.\nlet CommonLookups = DomainLookups\n| where DailyAvgLookupCountOverLookback > lookupThreshold;\n// Get current lookups to compare against the lookback period\nlet TodayLookups = DnsEvents\n| where TimeGenerated between(starttime..endtime)\n| where SubType == \"LookupQuery\"\n| where isnotempty(IPAddresses)\n| extend Domain = iff(countof(Name,'.') >= 2, strcat(split(Name,'.')[-2], '.',split(Name,'.')[-1]), Name)\n| summarize LookupStartTime = min(TimeGenerated), LookupEndTime = max(TimeGenerated), LookupCountToday = count() by ClientIP, Domain, IPAddresses\n| project LookupStartTime, LookupEndTime, ClientIP, LookupCountToday, Domain, IPAddresses;\n// Remove Common Lookups from lookback period from Todays lookups\nlet UncommonLookupsToday = TodayLookups\n| join kind=leftanti (\nCommonLookups\n)\non Domain;\n// Join back the Daily Average Lookup Count to add context to rarity over lookback period\nlet RareLookups = UncommonLookupsToday | join kind= innerunique (\nDomainLookups\n) on Domain\n| project LookupStartTime, LookupEndTime, ClientIP, Domain, IPAddresses, LookupCountToday, DailyAvgLookupCountOverLookback;\nlet DNSIPBreakout = RareLookups\n| extend DnsIPAddress = iff(IPAddresses has \",\", split(IPAddresses, \",\"), todynamic(IPAddresses))\n| mvexpand DnsIPAddress\n| extend DnsIPAddress = tostring(DnsIPAddress)\n| distinct LookupStartTime, LookupEndTime, ClientIP, Domain, DnsIPAddress, LookupCountToday, DailyAvgLookupCountOverLookback\n| extend IPCustomEntity = DnsIPAddress\n| extend DnsIPType = iff(DnsIPAddress matches regex PrivateIPregex,\"private\" ,\"public\" )\n| where DnsIPType ==\"public\"\n;\nlet DataMovement = ( union isfuzzy=true\n(CommonSecurityLog\n| where TimeGenerated between(starttime..endtime)\n| where DeviceVendor ==\"Palo Alto Networks\" and Activity == \"TRAFFIC\"\n| extend DestinationIPType = iff(DestinationIP matches regex PrivateIPregex,\"private\" ,\"public\" )\n| where DestinationIPType ==\"public\"\n| project DataType = DeviceVendor, TimeGenerated, SourceIP , SourcePort , DestinationIP, DestinationPort, ReceivedBytes, SentBytes\n| sort by SourceIP asc, SourcePort asc,TimeGenerated asc, DestinationIP asc, DestinationPort asc\n| summarize sum(ReceivedBytes), sum(SentBytes), ConnectionCount = count() by DataType, SourceIP, SourcePort, DestinationIP, DestinationPort\n| extend IPCustomEntity = DestinationIP\n| sort by sum_SentBytes desc\n),\n(WireData\n| where TimeGenerated between(starttime..endtime)\n| where Direction == \"Outbound\"\n| extend RemoteIPType = iff(RemoteIP matches regex PrivateIPregex,\"private\" ,\"public\" )\n| where RemoteIPType ==\"public\"\n| project DataType = Type, TimeGenerated , SourceIP = LocalIP , SourcePort = LocalPortNumber , DestinationIP = RemoteIP, DestinationPort = RemotePortNumber, ReceivedBytes, SentBytes\n| summarize sum(ReceivedBytes), sum(SentBytes), ConnectionCount = count() by DataType, SourceIP, SourcePort, DestinationIP, DestinationPort\n| extend IPCustomEntity = DestinationIP\n| extend DataType = Type\n| sort by sum_SentBytes desc\n),\n(VMConnection\n| where TimeGenerated between(starttime..endtime)\n| where Direction == \"outbound\"\n| extend DestinationIPType = iff(DestinationIp matches regex PrivateIPregex,\"private\" ,\"public\" )\n| where DestinationIPType ==\"public\"\n| project DataType = Type, TimeGenerated, SourceIP = SourceIp , DestinationIP = DestinationIp, DestinationPort, ReceivedBytes = BytesReceived, SentBytes = BytesSent\n| summarize sum(ReceivedBytes), sum(SentBytes), ConnectionCount = count() by DataType, SourceIP, DestinationIP, DestinationPort\n| sort by sum_SentBytes desc\n| extend IPCustomEntity = DestinationIP\n)\n);\nDNSIPBreakout | join kind = leftouter (\nDataMovement\n) on $left.DnsIPAddress == $right.DestinationIP and $left.ClientIP == $right.SourceIP\n| project-away DnsIPAddress, ClientIP\n// The below condition can be removed to see all DNS results.\n// This is used here as the goal of the query is to connect rare DNS lookups to a data type that can show byte transfers to that given DestinationIP\n| where isnotempty(DataType)\n| extend timestamp = LookupStartTime, IPCustomEntity = DestinationIP\n",
        "version": 1,
        "tags": [
          {
            "name": "description",
            "value": "This query is designed to help identify rare DNS connections and resulting data transfer to/from the associated domain.\nThis can help identify unexpected large data transfers to or from internal systems which may indicate data exfil or mali"
          },
          {
            "name": "tactics",
            "value": "CommandAndControl,Exfiltration"
          },
          {
            "name": "relevantTechniques",
            "value": "T1071,T1048"
          }
        ]
      }
    }
  ]
}
