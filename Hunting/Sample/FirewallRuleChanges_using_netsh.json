{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "workspace": {
      "type": "String"
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('workspace'), '/FirewallRuleChanges_using_netsh')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "eTag": "*",
        "displayName": "Rare firewall rule changes using netsh",
        "category": "Hunting Queries",
        "query": "let starttime = todatetime('{{StartTimeISO}}');\nlet endtime = todatetime('{{EndTimeISO}}');\n// historical time frame\nlet lookback = totimespan((endtime-starttime)*7);\nlet AccountAllowList = dynamic(['SYSTEM']);\nlet tokens = dynamic([\"add\", \"delete\", \"set\"]);\n(union isfuzzy=true\n(\nSecurityEvent\n| where TimeGenerated >= ago(lookback)\n// remove comment below to adjust for noise\n// | where Process =~ \"netsh.exe\"\n| where CommandLine has_all (\"advfirewall\", \"firewall\") and CommandLine has_any (tokens)\n| where AccountType !~ \"Machine\" and Account !in~ (AccountAllowList)\n| extend KeyValuePairs = extract_all(@'(?P<key>\\w+)=(?P<value>[a-zA-Z0-9-\\\":\\\\\\s$_@().\"]+\\\"|[a-zA-Z0-9-\\\":$_\\\\@().\"]+)', dynamic([\"key\",\"value\"]), CommandLine)\n| mv-apply KeyValuePairs on (\n  summarize CommandLineParsed = make_bag(pack(tostring(KeyValuePairs[0]), KeyValuePairs[1]))\n )\n| extend RuleName = tostring(parse_json(CommandLineParsed).name), Program = tostring(parse_json(CommandLineParsed).program)\n| join kind=leftanti (\nSecurityEvent\n| where TimeGenerated between (starttime..endtime)\n// remove comment below to adjust for noise\n// | where Process =~ \"netsh.exe\"\n| where CommandLine has_all (\"advfirewall\", \"firewall\") and CommandLine has_any (tokens)\n| where AccountType !~ \"Machine\" and Account !in~ (AccountAllowList)\n| extend KeyValuePairs = extract_all(@'(?P<key>\\w+)=(?P<value>[a-zA-Z0-9-\\\":\\\\\\s$_@().\"]+\\\"|[a-zA-Z0-9-\\\":$_\\\\@().\"]+)', dynamic([\"key\",\"value\"]), CommandLine)\n| mv-apply KeyValuePairs on (\n  summarize CommandLineParsed = make_bag(pack(tostring(KeyValuePairs[0]), KeyValuePairs[1]))\n )\n| extend RuleName = tostring(parse_json(CommandLineParsed).name), Program = tostring(parse_json(CommandLineParsed).program)\n) on RuleName, Program\n| summarize count() , StartTime= min(TimeGenerated), EndTime=max(TimeGenerated) by Type, Computer, Account, SubjectDomainName, SubjectUserName, RuleName, Program, CommandLineParsed = tostring(CommandLineParsed), Process, ParentProcessName\n| extend timestamp = StartTime, AccountCustomEntity = Account, HostCustomEntity = Computer\n),\n(\nDeviceProcessEvents\n| where TimeGenerated >= ago(lookback)\n// remove comment below to adjust for noise\n// | where InitiatingProcessFileName =~ \"netsh.exe\"\n| where InitiatingProcessCommandLine has_all (\"advfirewall\", \"firewall\") and InitiatingProcessCommandLine has_any (tokens)\n| where AccountName !in~ (AccountAllowList)\n| extend KeyValuePairs = extract_all(@'(?P<key>\\w+)=(?P<value>[a-zA-Z0-9-\\\":\\\\\\s$_@().\"]+\\\"|[a-zA-Z0-9-\\\":$_\\\\@().\"]+)', dynamic([\"key\",\"value\"]), InitiatingProcessCommandLine)\n| mv-apply KeyValuePairs on (\n  summarize CommandLineParsed = make_bag(pack(tostring(KeyValuePairs[0]), KeyValuePairs[1]))\n)\n| extend RuleName = tostring(parse_json(CommandLineParsed).name), Program = tostring(parse_json(CommandLineParsed).program)\n| join kind=leftanti (\nDeviceProcessEvents\n| where TimeGenerated between (starttime..endtime)\n// remove comment below to adjust for noise\n// | where InitiatingProcessFileName =~ \"netsh.exe\"\n| where InitiatingProcessCommandLine has_all (\"advfirewall\", \"firewall\") and InitiatingProcessCommandLine has_any (tokens)\n| where AccountName !in~ (AccountAllowList)\n| extend KeyValuePairs = extract_all(@'(?P<key>\\w+)=(?P<value>[a-zA-Z0-9-\\\":\\\\\\s$_@().\"]+\\\"|[a-zA-Z0-9-\\\":$_\\\\@().\"]+)', dynamic([\"key\",\"value\"]), InitiatingProcessCommandLine)\n| mv-apply KeyValuePairs on (\n  summarize CommandLineParsed = make_bag(pack(tostring(KeyValuePairs[0]), KeyValuePairs[1]))\n)\n| extend RuleName = tostring(parse_json(CommandLineParsed).name), Program = tostring(parse_json(CommandLineParsed).program)\n) on RuleName, Program\n| summarize count() , StartTime= min(TimeGenerated), EndTime=max(TimeGenerated) by Type, DeviceName, AccountName, InitiatingProcessAccountDomain, InitiatingProcessAccountName, RuleName, Program,  CommandLineParsed = tostring(CommandLineParsed), InitiatingProcessFileName, InitiatingProcessParentFileName\n| extend timestamp = StartTime, AccountCustomEntity = InitiatingProcessAccountName, HostCustomEntity = DeviceName\n),\n(\nEvent\n| where TimeGenerated > ago(lookback)\n| where Source == \"Microsoft-Windows-Sysmon\"\n| where EventID == 1\n| extend EventData = parse_xml(EventData).DataItem.EventData.Data\n| mv-expand bagexpansion=array EventData\n| evaluate bag_unpack(EventData)\n| extend Key=tostring(['@Name']), Value=['#text']\n| evaluate pivot(Key, any(Value), TimeGenerated, Source, EventLog, Computer, EventLevel, EventLevelName, EventID, UserName, RenderedDescription, MG, ManagementGroupName, Type, _ResourceId)\n// remove comment below to adjust for noise\n// | where OriginalFileName =~ \"netsh.exe\"\n| where CommandLine has_all (\"advfirewall\", \"firewall\") and CommandLine has_any (tokens)\n| where User !in~ (AccountAllowList)\n| extend KeyValuePairs = extract_all(@'(?P<key>\\w+)=(?P<value>[a-zA-Z0-9-\\\":\\\\\\s$_@().\"]+\\\"|[a-zA-Z0-9-\\\":$_\\\\@().\"]+)', dynamic([\"key\",\"value\"]), CommandLine)\n| mv-apply KeyValuePairs on (\n  summarize CommandLineParsed = make_bag(pack(tostring(KeyValuePairs[0]), KeyValuePairs[1]))\n)\n| extend RuleName = tostring(parse_json(CommandLineParsed).name), Program = tostring(parse_json(CommandLineParsed).program)\n| join kind=leftanti (\nEvent\n| where TimeGenerated > ago(lookback)\n| where Source == \"Microsoft-Windows-Sysmon\"\n| where EventID == 1\n| extend EventData = parse_xml(EventData).DataItem.EventData.Data\n| mv-expand bagexpansion=array EventData\n| evaluate bag_unpack(EventData)\n| extend Key=tostring(['@Name']), Value=['#text']\n| evaluate pivot(Key, any(Value), TimeGenerated, Source, EventLog, Computer, EventLevel, EventLevelName, EventID, UserName, RenderedDescription, MG, ManagementGroupName, Type, _ResourceId)\n// remove comment below to adjust for noise\n// | where OriginalFileName =~ \"netsh.exe\"\n| where CommandLine has_all (\"advfirewall\", \"firewall\") and CommandLine has_any (tokens)\n| where User !in~ (AccountAllowList)\n| extend KeyValuePairs = extract_all(@'(?P<key>\\w+)=(?P<value>[a-zA-Z0-9-\\\":\\\\\\s$_@().\"]+\\\"|[a-zA-Z0-9-\\\":$_\\\\@().\"]+)', dynamic([\"key\",\"value\"]), CommandLine)\n| mv-apply KeyValuePairs on (\n  summarize CommandLineParsed = make_bag(pack(tostring(KeyValuePairs[0]), KeyValuePairs[1]))\n)\n| extend RuleName = tostring(parse_json(CommandLineParsed).name), Program = tostring(parse_json(CommandLineParsed).program)\n) on RuleName, Program\n| extend Type = strcat(Type, \": \", Source)\n| summarize count() , StartTime= min(TimeGenerated), EndTime=max(TimeGenerated) by Type, Computer, User, Process, RuleName, Program, CommandLineParsed = tostring(CommandLineParsed), ParentImage\n| extend timestamp = StartTime, AccountCustomEntity = User, HostCustomEntity = Computer\n)\n)\n",
        "version": 1,
        "tags": [
          {
            "name": "description",
            "value": "his query will show rare firewall rule changes using netsh utility by comparing rule names and program names from the previous day\nwith those from the historical chosen time frame.\n- This technique was seen in relation to Solarigate attack "
          },
          {
            "name": "tactics",
            "value": "Execution"
          },
          {
            "name": "relevantTechniques",
            "value": "T1204"
          }
        ]
      }
    }
  ]
}
