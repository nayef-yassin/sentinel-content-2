{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "workspace": {
      "type": "String"
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('workspace'), '/RareProcbyServiceAccount')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "eTag": "*",
        "displayName": "Rare processes run by Service accounts",
        "category": "Hunting Queries",
        "query": "\nlet starttime = todatetime('{{StartTimeISO}}');\nlet endtime = todatetime('{{EndTimeISO}}');\nlet excludeList = dynamic ( [\"NT AUTHORITY\",\"Local System\", \"Local Service\", \"Network Service\"] );\nlet List1 = datatable(AccountName:string)[\"MSSQLSERVER\", \"ReportServer\", \"MSDTSServer100\", \"IUSR\"];\n// Provide a list of service account/ built-in accounts in an environment.\nlet List2 = SecurityEvent\n// Self generating a list of Service account using event Id :4624\n| where TimeGenerated between(starttime..endtime)\n| where EventID == 4624\n| where LogonType == \"5\"\n| where not(Account has_any (excludeList))\n| extend AccountName = Account\n| distinct AccountName;\nlet Accounts = List1 | union (List2 | distinct AccountName);\nlet ProcessCreationEvents=() {\n    let processEvents=SecurityEvent\n\t| where TimeGenerated between(starttime..endtime)\n    | where EventID==4688\n    // filter out common randomly named files related to MSI installers and browsers\n    | where not(NewProcessName matches regex @\"\\\\TRA[0-9A-Fa-f]{3}\\.tmp\")\n    | where not(NewProcessName matches regex @\"\\\\TRA[0-9A-Fa-f]{4}\\.tmp\")\n    | where not(NewProcessName matches regex @\"Installer\\\\MSI[0-9A-Fa-f]{3}\\.tmp\")\n    | where not(NewProcessName matches regex @\"Installer\\\\MSI[0-9A-Fa-f]{4}\\.tmp\")\n    | project TimeGenerated,\n      ComputerName=Computer,\n      AccountName=SubjectUserName,\n      AccountDomain=SubjectDomainName,\n      FileName=tostring(split(NewProcessName, '\\\\')[-1]),\n      ProcessCommandLine = CommandLine,\n      InitiatingProcessFileName=ParentProcessName,\n      InitiatingProcessCommandLine=\"\",\n      InitiatingProcessParentFileName=\"\";\n    processEvents;\n    };\n    let normalizedProcesses = ProcessCreationEvents\n       // normalize guids\n       | project TimeGenerated, AccountName, FileName = replace(\"[0-9A-Fa-f]{8}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{12}\", \"<guid>\", FileName)\n       // normalize digits away\n       | project TimeGenerated, AccountName, FileName=replace(@'\\d', 'n', FileName);\nlet freqs = normalizedProcesses\n    | summarize frequency = count() by FileName\n    | join kind= leftouter (\n       normalizedProcesses\n       | summarize Since=min(TimeGenerated), LastSeen=max(TimeGenerated)  by FileName, AccountName\n    ) on FileName;\n   let Finalfreqs = freqs\n    | where frequency <= toscalar( freqs | serialize | project frequency | summarize percentiles(frequency, 10))\n    | order by frequency asc\n    | project FileName, frequency, Since, LastSeen , AccountName\n    // restrict results to unusual processes seen in last day\n    | where LastSeen between(starttime..endtime);\nAccounts\n    | join kind= inner (\n        Finalfreqs\n) on AccountName\n| where frequency < 10\n| project-away AccountName1\n| extend AccountCustomEntity = AccountName\n",
        "version": 1,
        "tags": [
          {
            "name": "description",
            "value": "Service accounts normally are supposed to perform a limited set of tasks in a stable environment.\nThe query collects a list of service account and then joins them with rare processes in an environment to detect anomalous behaviours."
          },
          {
            "name": "tactics",
            "value": "Execution"
          }
        ]
      }
    }
  ]
}
